package controller;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.input.MouseEvent;
import javafx.stage.Stage;
import model.InHouse;
import model.Inventory;
import model.Outsourced;
import model.Part;
import java.io.IOException;
import java.net.URL;
import java.nio.file.Paths;
import java.util.Optional;
import java.util.ResourceBundle;
import static model.Inventory.AllParts;

/**This declares the class for the controller which manages all the functions of the add part screen.
 *
 */
public class AddPartController implements Initializable {

    /**establishes gui elements of the add part screen
     *
     */
    @FXML private RadioButton inHouseRadioButton;
    @FXML private RadioButton outsourceRadioButton;
    @FXML private TextField addPartIDTextField;
    @FXML private TextField addPartInventoryTextField;
    @FXML private TextField addPartMaxTextField;
    @FXML private TextField addPartMinTextField;
    @FXML private TextField addPartNameTextField;
    @FXML private TextField addPartPriceTextField;
    @FXML private Label partMachineIDCompanyNameLabel;
    @FXML private TextField addMachineIDCompanyNameTextField;

    /**calls a method that disallows editing in the ID field on the add part screen
     *
     * @param location
     * @param resources
     */
    public void initialize (URL location, ResourceBundle resources) {
        disableInteractivity();
    }

    //saves changes and adds new part to Parts table on main menu when user clicks "save"

    /**calls a method to have a part validated as meeting logical requirements for a program,
     * That method throws specific errors if the part does not.
     * User entries saved if the entry is valid
     * final called method displays a success alert, then forwards user to main menu
     */
    @FXML
    void addPartSaveChanges(MouseEvent event) throws IOException {
        //calls partVerified to validate that logical requirements for the part are met before saving

        if (partVerified()) {
            int id = 0;
            //gets user data from text fields]
            String name = addPartNameTextField.getText();
            Double price = Double.parseDouble(addPartPriceTextField.getText());
            int stock = Integer.parseInt(addPartInventoryTextField.getText());
            int max = Integer.parseInt(addPartMaxTextField.getText());
            int min = Integer.parseInt(addPartMinTextField.getText());
            if (inHouseRadioButton.isSelected()) {
                int machineID;
                machineID = Integer.parseInt(addMachineIDCompanyNameTextField.getText());
                InHouse newInHousePart = new InHouse(id, name, price, stock, min, max, machineID);
                newInHousePart.setId(incrementPartID());
                //saves in-house parts
                Inventory.addPart(newInHousePart);
                //confirms add part success and returns user to main page by calling addSuccess
                addSuccess(name, event);
            } else {
                if (outsourceRadioButton.isSelected()) {
                    String companyName = addMachineIDCompanyNameTextField.getText();
                    Outsourced newOutsourcedPart = new Outsourced(id, name, price, stock, min, max, companyName);
                    newOutsourcedPart.setId(incrementPartID());
                    //saves outsourced parts
                    Inventory.addPart(newOutsourcedPart);
                    //confirms add part success and returns user to main page by calling addSuccess
                    addSuccess (name, event);
                }
            }
        } else {
            //specific errors are generated by partVerified; this is a general else statement alternative if partVerified returns false
            System.out.println("Part Add Failure! See pop-up alert for details.");
        }
    }

    /**changes Company Name label to Machine ID when In-House radio button is selected
     *
     * @param event
     */
    @FXML
    void changeCompanyNameLabel(MouseEvent event) {
        partMachineIDCompanyNameLabel.setText("Machine ID");
    }

    /**changes Machine ID label to Company Name when Outsourced radio button is selected
     *
     * @param event
     */
    @FXML
    void changeMachineIDLabel(MouseEvent event) {
        partMachineIDCompanyNameLabel.setText("Company Name");
    }

    /**cancel button returns user to main menu
     *
     * @param event
     * @throws IOException
     */
    @FXML
    void addPartCancelChanges(MouseEvent event) throws IOException {
        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
        alert.setTitle("CONFIRM");
        alert.setHeaderText("Please confirm cancellation.");
        alert.setContentText("Are you sure you want to cancel? All changes will be lost");
        Optional<ButtonType> result = alert.showAndWait();
        if (result.isPresent() && result.get() == ButtonType.OK) {
            URL mainMenuURL = Paths.get("src/main/java/view/MainMenu.fxml").toUri().toURL();
            Parent mainMenuParent = FXMLLoader.load(mainMenuURL);
            Scene mainMenuScene = new Scene(mainMenuParent);
            Stage mainMenuStage = (Stage) ((Button) event.getSource()).getScene().getWindow();
            mainMenuStage.setScene(mainMenuScene);
            mainMenuStage.show();
        }
    }

    /**validating user-entered data in form
     *
     * @return true if data is valid, false if not
     */
    public boolean partVerified() {
        boolean partVerifyFlag = false;
        try {
            //gets user data from text fields
            int machineID;
            String companyName = addMachineIDCompanyNameTextField.getText();
            String name = addPartNameTextField.getText();
            Double price = Double.parseDouble(addPartPriceTextField.getText());
            int stock = Integer.parseInt(addPartInventoryTextField.getText());
            int max = Integer.parseInt(addPartMaxTextField.getText());
            int min = Integer.parseInt(addPartMinTextField.getText());
            //verifies part name is populated
            if (name.isEmpty()) {
                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setTitle("FAILURE");
                alert.setHeaderText("Part Not Added");
                alert.setContentText("Please enter a part name to proceed.");
                alert.showAndWait();
                //flags false (part verification failed) if part name is empty
                partVerifyFlag = false;
            } else {
                //verifies values for min/max are logical
                if (min < 0 || min > max) {
                    Alert alert = new Alert(Alert.AlertType.ERROR);
                    alert.setTitle("FAILURE");
                    alert.setHeaderText("Part Not Added");
                    alert.setContentText("Please choose a Min value less than Max value but no less than zero.");
                    alert.showAndWait();
                    //flags false (part verification failed) if min/max values are logical
                    partVerifyFlag = false;
                } else {
                    //verifies stock level is between min and max
                    if (stock < min || stock > max) {
                        Alert alert = new Alert(Alert.AlertType.ERROR);
                        alert.setTitle("FAILURE");
                        alert.setHeaderText("Part Not Added");
                        alert.setContentText("Inventory stock cannot be greater than Max value or less than Min value.");
                        alert.showAndWait();
                        //flags false (part verification failed) if stock is not between min/max
                        partVerifyFlag = false;
                    } else {
                        //verifies price is at least $0.01
                        if (price < .01) {
                            Alert alert = new Alert(Alert.AlertType.ERROR);
                            alert.setTitle("FAILURE");
                            alert.setHeaderText("Part Not Added");
                            alert.setContentText("Please enter a price of .01 or greater.");
                            alert.showAndWait();
                            //flags false if part price is $0 or less
                            partVerifyFlag = false;
                        } else {
                            if (inHouseRadioButton.isSelected()) {
                                try {
                                    //verifies Machine ID is an integer
                                    machineID = Integer.parseInt(addMachineIDCompanyNameTextField.getText());
                                    //flags that validation was completed successful
                                    partVerifyFlag = true;
                                } catch (Exception e) {
                                    Alert alert = new Alert(Alert.AlertType.ERROR);
                                    alert.setTitle("FAILURE");
                                    alert.setHeaderText("Part Not Added");
                                    alert.setContentText("Please enter Machine ID as an integer.");
                                    alert.showAndWait();
                                    //flags false if machine ID is not an integer
                                    partVerifyFlag = false;
                                }
                            } else {
                                if (outsourceRadioButton.isSelected()) {
                                    //verifies if company name is empty
                                    if (companyName.isEmpty()) {
                                        Alert alert = new Alert(Alert.AlertType.ERROR);
                                        alert.setTitle("FAILURE");
                                        alert.setHeaderText("Part Not Added");
                                        alert.setContentText("Please enter a Company ID.");
                                        alert.showAndWait();
                                        //flags false if company name is empty
                                        partVerifyFlag = false;
                                    } else {
                                        //if all other tests passed successfully, flags true
                                        partVerifyFlag = true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {
            //catches and alerts to general formatting issues (ex. string submitted instead of int, blank fields etc)
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("FAILURE");
            alert.setHeaderText("Part Not Added");
            alert.setContentText("One or more entries on the form is missing or has an invalid format.");
            alert.showAndWait();
            //flags false for formatting errors
            partVerifyFlag = false;
        }
        //takes stored variable partVerifyFlag and returns true/false
        return partVerifyFlag;}

    /**displays alert that the part-add was completed successfully, then returns user to main page
     *
     * @param name
     * @param event
     * @throws IOException
     */
    public void addSuccess(String name, MouseEvent event) throws IOException {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle("SUCCESS");
        alert.setHeaderText("Part Added");
        alert.setContentText(name + " has been added successfully.");
        alert.showAndWait();
        URL mainMenuURL = Paths.get("src/main/java/view/MainMenu.fxml").toUri().toURL();
        Parent mainMenuParent = FXMLLoader.load(mainMenuURL);
        Scene mainMenuScene = new Scene(mainMenuParent);
        Stage mainMenuStage = (Stage) ((Button) event.getSource()).getScene().getWindow();
        mainMenuStage.setScene(mainMenuScene);
        mainMenuStage.show();
    }

    /**find the highest ID number for existing parts
     *
     * @return highest ID number
     */
    public static int findMaxPartID() {
        return AllParts.stream()
                .mapToInt(Part::getId)
                .max()
                .orElse(0);
    }

    /**adds one to highest ID number and returns it to become new ID# when saved
     *
     * @return highest ID number +1
     */
    public static int incrementPartID() {
        int newID = findMaxPartID();
        newID++;
        return newID;
    }

    /**disallows editing part ID field
     *
     */
    public void disableInteractivity() {
        addPartIDTextField.setEditable(false);
        addPartIDTextField.setMouseTransparent(true);
    }
}
